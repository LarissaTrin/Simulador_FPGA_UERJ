// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "CMFfixedop.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic CMFfixedop::ap_const_logic_1 = sc_dt::Log_1;
const bool CMFfixedop::ap_const_boolean_1 = true;
const sc_logic CMFfixedop::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> CMFfixedop::ap_const_lv32_C = "1100";
const sc_lv<32> CMFfixedop::ap_const_lv32_1D = "11101";

CMFfixedop::CMFfixedop(sc_module_name name) : sc_module(name), mVcdFile(0) {
    CMFfixedop_mul_mubkb_U1 = new CMFfixedop_mul_mubkb<1,1,18,18,30>("CMFfixedop_mul_mubkb_U1");
    CMFfixedop_mul_mubkb_U1->din0(Entrada2_V);
    CMFfixedop_mul_mubkb_U1->din1(Entrada1_V);
    CMFfixedop_mul_mubkb_U1->dout(r_V_fu_75_p2);

    SC_METHOD(thread_Saida1_V);
    sensitive << ( ap_start );
    sensitive << ( addconv_fu_50_p0 );
    sensitive << ( addconv_fu_50_p1 );

    SC_METHOD(thread_Saida1_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_Saida2_V);
    sensitive << ( ap_start );
    sensitive << ( r_V_fu_75_p2 );

    SC_METHOD(thread_Saida2_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_addconv_fu_50_p0);
    sensitive << ( Entrada2_V );

    SC_METHOD(thread_addconv_fu_50_p1);
    sensitive << ( Entrada1_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "CMFfixedop_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Entrada1_V, "(port)Entrada1_V");
    sc_trace(mVcdFile, Entrada2_V, "(port)Entrada2_V");
    sc_trace(mVcdFile, Saida1_V, "(port)Saida1_V");
    sc_trace(mVcdFile, Saida1_V_ap_vld, "(port)Saida1_V_ap_vld");
    sc_trace(mVcdFile, Saida2_V, "(port)Saida2_V");
    sc_trace(mVcdFile, Saida2_V_ap_vld, "(port)Saida2_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, addconv_fu_50_p0, "addconv_fu_50_p0");
    sc_trace(mVcdFile, addconv_fu_50_p1, "addconv_fu_50_p1");
    sc_trace(mVcdFile, r_V_fu_75_p2, "r_V_fu_75_p2");
#endif

    }
    mHdltvinHandle.open("CMFfixedop.hdltvin.dat");
    mHdltvoutHandle.open("CMFfixedop.hdltvout.dat");
}

CMFfixedop::~CMFfixedop() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete CMFfixedop_mul_mubkb_U1;
}

void CMFfixedop::thread_Saida1_V() {
    Saida1_V = (!addconv_fu_50_p0.read().is_01() || !addconv_fu_50_p1.read().is_01())? sc_lv<18>(): (sc_bigint<18>(addconv_fu_50_p0.read()) + sc_bigint<18>(addconv_fu_50_p1.read()));
}

void CMFfixedop::thread_Saida1_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        Saida1_V_ap_vld = ap_const_logic_1;
    } else {
        Saida1_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixedop::thread_Saida2_V() {
    Saida2_V = r_V_fu_75_p2.read().range(29, 12);
}

void CMFfixedop::thread_Saida2_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        Saida2_V_ap_vld = ap_const_logic_1;
    } else {
        Saida2_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixedop::thread_addconv_fu_50_p0() {
    addconv_fu_50_p0 = Entrada2_V.read();
}

void CMFfixedop::thread_addconv_fu_50_p1() {
    addconv_fu_50_p1 = Entrada1_V.read();
}

void CMFfixedop::thread_ap_done() {
    ap_done = ap_start.read();
}

void CMFfixedop::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void CMFfixedop::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void CMFfixedop::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Entrada1_V\" :  \"" << Entrada1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Entrada2_V\" :  \"" << Entrada2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Saida1_V\" :  \"" << Saida1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Saida1_V_ap_vld\" :  \"" << Saida1_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Saida2_V\" :  \"" << Saida2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Saida2_V_ap_vld\" :  \"" << Saida2_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

