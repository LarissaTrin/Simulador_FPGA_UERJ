// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CMFteste1,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=35,HLS_SYN_LUT=98,HLS_VERSION=2018_3}" *)

module CMFteste1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Entrada1_V,
        Entrada2_V,
        Saida1_V,
        Saida1_V_ap_vld,
        Saida2_V,
        Saida2_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Entrada1_V;
input  [31:0] Entrada2_V;
output  [31:0] Saida1_V;
output   Saida1_V_ap_vld;
output  [31:0] Saida2_V;
output   Saida2_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Saida1_V_ap_vld;
reg Saida2_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [32:0] ret_V_fu_56_p2;
reg   [32:0] ret_V_reg_111;
wire    ap_CS_fsm_state2;
wire  signed [31:0] lhs_V_fu_52_p0;
wire  signed [32:0] lhs_V_fu_52_p1;
wire  signed [31:0] tmp_cast_fu_66_p0;
wire  signed [31:0] r_V_fu_69_p0;
wire  signed [55:0] tmp_cast_fu_66_p1;
wire  signed [31:0] r_V_fu_69_p1;
wire   [55:0] r_V_fu_69_p2;
wire  signed [32:0] r_V_1_fu_89_p0;
wire  signed [31:0] r_V_1_fu_89_p1;
wire   [55:0] r_V_1_fu_89_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_reg_111 <= ret_V_fu_56_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Saida1_V_ap_vld = 1'b1;
    end else begin
        Saida1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Saida2_V_ap_vld = 1'b1;
    end else begin
        Saida2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Saida1_V = {{r_V_fu_69_p2[55:24]}};

assign Saida2_V = {{r_V_1_fu_89_p2[55:24]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign lhs_V_fu_52_p0 = Entrada2_V;

assign lhs_V_fu_52_p1 = lhs_V_fu_52_p0;

assign r_V_1_fu_89_p0 = ret_V_reg_111;

assign r_V_1_fu_89_p1 = tmp_cast_fu_66_p1;

assign r_V_1_fu_89_p2 = ($signed(r_V_1_fu_89_p0) * $signed(r_V_1_fu_89_p1));

assign r_V_fu_69_p0 = tmp_cast_fu_66_p1;

assign r_V_fu_69_p1 = Entrada1_V;

assign r_V_fu_69_p2 = ($signed(r_V_fu_69_p0) * $signed(r_V_fu_69_p1));

assign ret_V_fu_56_p2 = ($signed(lhs_V_fu_52_p1) + $signed(33'd25501368));

assign tmp_cast_fu_66_p0 = Entrada2_V;

assign tmp_cast_fu_66_p1 = tmp_cast_fu_66_p0;

endmodule //CMFteste1
