-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CMFteste1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Entrada1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    Entrada2_V : IN STD_LOGIC_VECTOR (31 downto 0);
    Saida1_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    Saida1_V_ap_vld : OUT STD_LOGIC;
    Saida2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    Saida2_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of CMFteste1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CMFteste1,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=35,HLS_SYN_LUT=98,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv33_1851EB8 : STD_LOGIC_VECTOR (32 downto 0) := "000000001100001010001111010111000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_56_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_111 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lhs_V_fu_52_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_52_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_66_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_69_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_66_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_fu_69_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_69_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_1_fu_89_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_89_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_89_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ret_V_reg_111 <= ret_V_fu_56_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Saida1_V <= r_V_fu_69_p2(55 downto 24);

    Saida1_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Saida1_V_ap_vld <= ap_const_logic_1;
        else 
            Saida1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Saida2_V <= r_V_1_fu_89_p2(55 downto 24);

    Saida2_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Saida2_V_ap_vld <= ap_const_logic_1;
        else 
            Saida2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_fu_52_p0 <= Entrada2_V;
        lhs_V_fu_52_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_52_p0),33));

    r_V_1_fu_89_p0 <= ret_V_reg_111;
    r_V_1_fu_89_p1 <= tmp_cast_fu_66_p1(32 - 1 downto 0);
    r_V_1_fu_89_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_89_p0) * signed(r_V_1_fu_89_p1))), 56));
    r_V_fu_69_p0 <= tmp_cast_fu_66_p1(32 - 1 downto 0);
    r_V_fu_69_p1 <= Entrada1_V;
    r_V_fu_69_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_69_p0) * signed(r_V_fu_69_p1))), 56));
    ret_V_fu_56_p2 <= std_logic_vector(signed(lhs_V_fu_52_p1) + signed(ap_const_lv33_1851EB8));
    tmp_cast_fu_66_p0 <= Entrada2_V;
        tmp_cast_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_cast_fu_66_p0),56));

end behav;
