-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Entrada : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sen,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.026143,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=1644,HLS_SYN_LUT=2881,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal results_sign_V_1_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_941 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_242_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_948 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_reg_965 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_970 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_28_i_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_reg_991 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_12_i_i_reg_997 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_fu_349_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_reg_1002 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_7_fu_364_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_reg_1008 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_V_fu_415_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_zeros_V_reg_1013 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_V_reg_1019 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Ex_V_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1026 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1031 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_476_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1036 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_525_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal B_V_fu_556_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_V_reg_1062 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_trunc_V_reg_1067 : STD_LOGIC_VECTOR (14 downto 0);
    signal B_squared_V_reg_1087 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t1_V_reg_1092 : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_6_reg_1097 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_8_reg_1102 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_i_i_reg_1107 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_9_i_i_reg_1112 : STD_LOGIC_VECTOR (13 downto 0);
    signal Mx_V_read_assign_fu_650_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_read_assign_reg_1117 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ret_V_fu_671_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_reg_1122 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1127 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ret_V_2_fu_710_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_reg_1132 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_scaled_fixed2ieee_fu_214_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal resultf_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_214_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal tmp_5_i_i_i_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_i_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal expv_op_i_i_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_266_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_i_i_fu_285_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_9_fu_288_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_15_fu_304_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal tmp_7_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_359_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i_i_i_fu_371_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_16_fu_381_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_389_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_17_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_i_i_fu_419_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_i_fu_431_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_10_fu_434_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal storemerge_i_i_fu_424_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_i_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_i_i_cast_fu_458_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_i_i_fu_470_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_i_i_cast_fu_497_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_22_i_i_fu_503_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_i_i_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_4_i_i_cast_1_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_i_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_i_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0237_0_in_i_i_fu_518_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_basis_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_i_fu_546_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_921_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_12_fu_619_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_fu_619_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_12_fu_619_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_928_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_1_fu_656_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_1_fu_659_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_11_fu_662_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_2_i_cast_fu_668_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_689_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_689_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_14_fu_689_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Ex_V_ret_i_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_706_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_20_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_fu_742_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_748_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_786_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_i_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_9_trunc_s_fu_845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_demorg_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_cast_fu_870_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_fu_728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_i_cast_fu_891_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_fu_738_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_3_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_8_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_9_fu_899_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_21_fu_907_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_921_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_591_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_921_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_13_fu_928_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_318_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal grp_fu_318_p10 : STD_LOGIC_VECTOR (103 downto 0);
    signal r_V_12_fu_619_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_928_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_689_p10 : STD_LOGIC_VECTOR (57 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (28 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sen_mul_80ns_24nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (103 downto 0) );
    end component;


    component sen_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sen_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sen_mul_mul_15ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sen_mul_mul_15ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sen_ref_4oPi_tablbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sen_second_order_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sen_second_order_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sen_second_order_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component sen_ref_4oPi_tablbkb
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component sen_second_order_cud
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component sen_second_order_dEe
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component sen_second_order_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    grp_scaled_fixed2ieee_fu_214 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_214_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_214_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_214_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_214_ap_ready,
        in_V => result_V_reg_1127,
        prescale => ret_V_2_reg_1132,
        ap_return => grp_scaled_fixed2ieee_fu_214_ap_return);

    sen_mul_80ns_24nsfYi_U3 : component sen_mul_80ns_24nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 104)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_318_p0,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    sen_mux_83_1_1_1_U4 : component sen_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_25_reg_1002,
        dout => cos_basis_fu_525_p10);

    sen_mux_164_1_1_1_U5 : component sen_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_742_p3,
        dout => tmp_fu_748_p18);

    sen_mux_164_1_1_1_U6 : component sen_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_742_p3,
        dout => tmp_1_fu_786_p18);

    sen_mul_mul_15ns_g8j_U7 : component sen_mul_mul_15ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_11_fu_921_p0,
        din1 => r_V_11_fu_921_p1,
        dout => r_V_11_fu_921_p2);

    sen_mul_mul_15ns_hbi_U8 : component sen_mul_mul_15ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_13_fu_928_p0,
        din1 => second_order_float_8_reg_1102,
        dout => r_V_13_fu_928_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                B_V_reg_1062 <= B_V_fu_556_p1;
                B_trunc_V_reg_1067 <= p_0237_0_in_i_i_fu_518_p3(21 downto 7);
                cos_basis_reg_1055 <= cos_basis_fu_525_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                B_squared_V_reg_1087 <= r_V_11_fu_921_p2(29 downto 15);
                second_order_float_6_reg_1097 <= second_order_float_3_q0;
                second_order_float_8_reg_1102 <= second_order_float_s_q0;
                t1_V_reg_1092 <= second_order_float_2_q0(29 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Ex_V_reg_1026 <= Ex_V_fu_452_p2;
                Mx_V_reg_1019 <= r_V_10_fu_434_p2(57 downto 29);
                isNeg_reg_1031 <= Ex_V_fu_452_p2(7 downto 7);
                tmp_27_i_reg_1042 <= tmp_27_i_fu_484_p2;
                tmp_29_i_reg_1048 <= tmp_29_i_fu_489_p2;
                ush_reg_1036 <= ush_fu_476_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Med_V_reg_970 <= r_V_9_fu_288_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Mx_V_read_assign_reg_1117 <= Mx_V_read_assign_fu_650_p3;
                ret_V_reg_1122 <= ret_V_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Mx_zeros_V_reg_1013 <= Mx_zeros_V_fu_415_p1;
                p_Val2_25_reg_1002 <= p_Val2_25_fu_349_p3;
                p_Val2_7_reg_1008 <= p_Val2_7_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                closepath_reg_954 <= closepath_fu_246_p2;
                results_sign_V_1_reg_935 <= p_Val2_s_fu_220_p1(31 downto 31);
                tmp_6_reg_965 <= tmp_6_fu_281_p1;
                tmp_V_1_reg_948 <= tmp_V_1_fu_242_p1;
                tmp_V_reg_941 <= p_Val2_s_fu_220_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_24_reg_991 <= grp_fu_318_p2(76 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                result_V_reg_1127 <= r_V_14_fu_689_p2(57 downto 29);
                ret_V_2_reg_1132 <= ret_V_2_fu_710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                resultf_reg_1137 <= grp_scaled_fixed2ieee_fu_214_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_954 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_12_i_i_reg_997 <= grp_fu_318_p2(79 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_28_i_reg_985 <= tmp_28_i_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_7_i_i_reg_1107 <= r_V_12_fu_619_p2(44 downto 23);
                tmp_9_i_i_reg_1112 <= r_V_13_fu_928_p2(29 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, grp_scaled_fixed2ieee_fu_214_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_scaled_fixed2ieee_fu_214_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_556_p1 <= p_0237_0_in_i_i_fu_518_p3(22 - 1 downto 0);
    Ex_V_fu_452_p2 <= std_logic_vector(unsigned(storemerge_i_i_fu_424_p3) - unsigned(tmp_18_i_i_fu_449_p1));
    Mx_V_read_assign_fu_650_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1055(0) = '1') else 
        Mx_V_reg_1019;
    Mx_bits_V_1_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_24_reg_991));
    Mx_zeros_V_fu_415_p1 <= val_assign_fu_407_p3(5 - 1 downto 0);
    addr_V_fu_258_p3 <= 
        ap_const_lv8_3F when (closepath_fu_246_p2(0) = '1') else 
        expv_op_i_i_fu_252_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_21_fu_907_p4;
    closepath_fu_246_p2 <= "1" when (unsigned(tmp_V_fu_232_p4) < unsigned(ap_const_lv8_7E)) else "0";
    expv_op_i_i_fu_252_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(tmp_V_fu_232_p4));
    grp_fu_318_p0 <= grp_fu_318_p00(80 - 1 downto 0);
    grp_fu_318_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_reg_970),104));
    grp_fu_318_p1 <= grp_fu_318_p10(24 - 1 downto 0);
    grp_fu_318_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_304_p3),104));
    grp_scaled_fixed2ieee_fu_214_ap_start <= grp_scaled_fixed2ieee_fu_214_ap_start_reg;
    isNeg_fu_462_p3 <= Ex_V_fu_452_p2(7 downto 7);
        lhs_V_1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1092),30));

    not_or_cond_i_demorg_fu_860_p2 <= (tmp_28_i_reg_985 and tmp_27_i_reg_1042);
    not_or_cond_i_fu_864_p2 <= (not_or_cond_i_demorg_fu_860_p2 xor ap_const_lv1_1);
    not_tmp_i_fu_835_p2 <= (tmp_29_i_reg_1048 xor ap_const_lv1_1);
    or_cond_i_fu_831_p2 <= (tmp_28_i_reg_985 and tmp_27_i_reg_1042);
    p_0237_0_in_i_i_fu_518_p3 <= 
        tmp_24_i_i_fu_508_p1 when (isNeg_reg_1031(0) = '1') else 
        tmp_25_i_i_fu_512_p2;
    p_1_i_i_fu_419_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(tmp_V_reg_941));
    p_Ex_V_ret_i_fu_677_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1055(0) = '1') else 
        Ex_V_reg_1026;
    p_Repl2_3_fu_853_p3 <= 
        results_sign_V_1_reg_935 when (or_cond_i_fu_831_p2(0) = '1') else 
        p_Repl2_9_trunc_s_fu_845_p3;
    p_Repl2_9_trunc_s_fu_845_p3 <= 
        not_tmp_i_fu_835_p2 when (tmp_11_i_fu_840_p2(0) = '1') else 
        p_Result_19_fu_720_p3;
    p_Result_15_fu_304_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_948);
    p_Result_16_fu_381_p3 <= (p_Result_i_i_i_fu_371_p4 & ap_const_lv1_1);
    p_Result_17_fu_399_p3 <= (ap_const_lv2_3 & p_Result_s_fu_389_p4);
    p_Result_18_fu_576_p3 <= (sin_basis_fu_570_p2 & p_Result_i_i_fu_546_p4);
    p_Result_19_fu_720_p3 <= p_Val2_20_fu_717_p1(31 downto 31);
    p_Result_1_i_cast_fu_891_p3 <= 
        ap_const_lv23_7FFFFF when (not_or_cond_i_fu_864_p2(0) = '1') else 
        ap_const_lv23_0;
    p_Result_20_fu_742_p3 <= (results_sign_V_1_reg_935 & p_Val2_25_reg_1002);
    p_Result_21_fu_907_p4 <= ((p_Repl2_3_fu_853_p3 & ret_V_8_fu_883_p3) & ret_V_9_fu_899_p3);
    p_Result_i_cast_fu_870_p3 <= 
        ap_const_lv8_FF when (not_or_cond_i_fu_864_p2(0) = '1') else 
        ap_const_lv8_0;
    p_Result_i_i_fu_546_p4 <= p_0237_0_in_i_i_fu_518_p3(28 downto 22);
    p_Result_i_i_i_fu_371_p4 <= p_Val2_7_fu_364_p3(57 downto 29);
    
    p_Result_s_fu_389_p4_proc : process(p_Result_16_fu_381_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_s_fu_389_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_16_fu_381_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_s_fu_389_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_s_fu_389_p4_i) := p_Result_16_fu_381_p3(30-1-p_Result_s_fu_389_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_389_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Val2_20_fu_717_p1 <= resultf_reg_1137;
    p_Val2_25_fu_349_p3 <= 
        ap_const_lv3_0 when (closepath_reg_954(0) = '1') else 
        tmp_12_i_i_reg_997;
    p_Val2_7_fu_364_p3 <= 
        Mx_bits_V_1_fu_359_p2 when (tmp_7_fu_355_p1(0) = '1') else 
        p_Val2_24_reg_991;
    p_Val2_s_fu_220_p1 <= Entrada;
    r_V_10_fu_434_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_reg_1008),to_integer(unsigned('0' & tmp_15_i_i_fu_431_p1(31-1 downto 0)))));
    r_V_11_fu_921_p0 <= r_V_fu_591_p1(15 - 1 downto 0);
    r_V_11_fu_921_p1 <= r_V_fu_591_p1(15 - 1 downto 0);
    r_V_12_fu_619_p0 <= second_order_float_6_reg_1097;
    r_V_12_fu_619_p1 <= r_V_12_fu_619_p10(22 - 1 downto 0);
    r_V_12_fu_619_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1062),45));
    r_V_12_fu_619_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_619_p0) * signed('0' &r_V_12_fu_619_p1))), 45));
    r_V_13_fu_928_p0 <= r_V_13_fu_928_p00(15 - 1 downto 0);
    r_V_13_fu_928_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1087),30));
    r_V_14_fu_689_p0 <= ret_V_reg_1122;
    r_V_14_fu_689_p1 <= r_V_14_fu_689_p10(29 - 1 downto 0);
    r_V_14_fu_689_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_reg_1117),58));
    r_V_14_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_14_fu_689_p0) * signed('0' &r_V_14_fu_689_p1))), 58));
    r_V_9_fu_288_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & tmp_7_i_i_i_fu_285_p1(31-1 downto 0)))));
    r_V_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1067),30));
    ref_4oPi_table_100_V_address0 <= tmp_5_i_i_i_fu_276_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_11_fu_662_p2 <= std_logic_vector(signed(lhs_V_1_fu_656_p1) + signed(rhs_V_1_fu_659_p1));
    ret_V_2_fu_710_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_2_fu_706_p1));
    ret_V_8_fu_883_p3 <= 
        p_Result_i_cast_fu_870_p3 when (tmp_2_fu_878_p2(0) = '1') else 
        tmp_V_2_fu_728_p4;
    ret_V_9_fu_899_p3 <= 
        p_Result_1_i_cast_fu_891_p3 when (tmp_2_fu_878_p2(0) = '1') else 
        tmp_V_3_fu_738_p1;
    ret_V_fu_671_p2 <= std_logic_vector(unsigned(ret_V_11_fu_662_p2) + unsigned(rhs_V_2_i_cast_fu_668_p1));
        rhs_V_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_i_i_reg_1107),30));

        rhs_V_2_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_i_fu_677_p3),9));

        rhs_V_2_i_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_i_i_reg_1112),30));

    second_order_float_2_address0 <= tmp_26_i_i_fu_584_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= tmp_26_i_i_fu_584_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= tmp_26_i_i_fu_584_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_4_i_i_cast_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1036),32));

        sh_assign_4_i_i_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1036),29));

        sh_i_i_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_452_p2),9));

    sin_basis_fu_570_p2 <= (cos_basis_fu_525_p10 xor ap_const_lv1_1);
    storemerge_i_i_fu_424_p3 <= 
        p_1_i_i_fu_419_p2 when (closepath_reg_954(0) = '1') else 
        ap_const_lv8_0;
    tmp_11_i_fu_840_p2 <= (tmp_29_i_reg_1048 or tmp_26_i_fu_824_p3);
    tmp_15_i_i_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1013),58));
    tmp_18_i_i_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1013),8));
    tmp_20_i_i_fu_470_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_i_i_cast_fu_458_p1));
    tmp_21_i_i_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1019),32));
    tmp_22_i_i_fu_503_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1019),to_integer(unsigned('0' & sh_assign_4_i_i_cast_fu_497_p1(29-1 downto 0)))));
    tmp_24_i_i_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_i_i_fu_503_p2),32));
    tmp_25_i_i_fu_512_p2 <= std_logic_vector(shift_left(unsigned(tmp_21_i_i_fu_500_p1),to_integer(unsigned('0' & sh_assign_4_i_i_cast_1_fu_494_p1(31-1 downto 0)))));
    tmp_26_i_fu_824_p3 <= 
        tmp_fu_748_p18 when (cos_basis_reg_1055(0) = '1') else 
        tmp_1_fu_786_p18;
    tmp_26_i_i_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_576_p3),64));
    tmp_27_i_fu_484_p2 <= "1" when (tmp_V_reg_941 = ap_const_lv8_0) else "0";
    tmp_28_i_fu_324_p2 <= "1" when (tmp_V_1_reg_948 = ap_const_lv23_0) else "0";
    tmp_29_i_fu_489_p2 <= "1" when (tmp_V_reg_941 = ap_const_lv8_FF) else "0";
    tmp_2_fu_878_p2 <= (tmp_29_i_reg_1048 or or_cond_i_fu_831_p2);
    tmp_3_fu_266_p4 <= addr_V_fu_258_p3(7 downto 4);
    tmp_5_i_i_i_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_266_p4),64));
    tmp_6_fu_281_p1 <= addr_V_fu_258_p3(4 - 1 downto 0);
    tmp_7_fu_355_p1 <= p_Val2_25_fu_349_p3(1 - 1 downto 0);
    tmp_7_i_i_i_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_965),100));
    tmp_V_1_fu_242_p1 <= p_Val2_s_fu_220_p1(23 - 1 downto 0);
    tmp_V_2_fu_728_p4 <= p_Val2_20_fu_717_p1(30 downto 23);
    tmp_V_3_fu_738_p1 <= p_Val2_20_fu_717_p1(23 - 1 downto 0);
    tmp_V_fu_232_p4 <= p_Val2_s_fu_220_p1(30 downto 23);
    ush_fu_476_p3 <= 
        tmp_20_i_i_fu_470_p2 when (isNeg_fu_462_p3(0) = '1') else 
        sh_i_i_cast_fu_458_p1;
    
    val_assign_fu_407_p3_proc : process(p_Result_17_fu_399_p3)
    begin
        val_assign_fu_407_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_399_p3(i) = '1' then
                val_assign_fu_407_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
