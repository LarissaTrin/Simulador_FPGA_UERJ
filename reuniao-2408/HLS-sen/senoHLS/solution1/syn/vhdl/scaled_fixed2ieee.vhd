-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (28 downto 0);
    prescale : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of scaled_fixed2ieee is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_bits_0_V_fu_194_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_0_V_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_218_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_1_1_fu_280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_2_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_304_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_502 : STD_LOGIC_VECTOR (1 downto 0);
    signal sh_assign_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_V_fu_370_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_s_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_s_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_s_reg_123 : STD_LOGIC_VECTOR (28 downto 0);
    signal shift_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_145 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_reg_156 : STD_LOGIC_VECTOR (28 downto 0);
    signal shift_1_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_176_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_186_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_206_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_210_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_fu_242_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_246_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_255_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_fu_272_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_362_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_19_fu_366_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_cast_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp1_fu_419_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_22_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_V_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal significand_V_fu_429_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_23_fu_445_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_write_assign_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                                        ap_return_preg(30 downto 0) <= result_write_assign_fu_455_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_112 <= i_fu_236_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_112 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i2_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_145 <= ap_const_lv2_0;
            elsif (((tmp_1_fu_377_p2 = ap_const_lv1_1) and (tmp_15_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_145 <= i_1_reg_502;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_377_p2 = ap_const_lv1_0) and (tmp_15_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_156 <= r_V_fu_370_p3;
            elsif (((tmp_15_fu_296_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_s_reg_156 <= p_s_reg_123;
            end if; 
        end if;
    end process;

    p_s_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_s_reg_123 <= in_V;
            elsif (((tmp_1_fu_377_p2 = ap_const_lv1_1) and (tmp_15_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_s_reg_123 <= r_V_fu_370_p3;
            end if; 
        end if;
    end process;

    shift_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_377_p2 = ap_const_lv1_0) and (tmp_15_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_1_reg_166 <= shift_2_fu_336_p2;
            elsif (((tmp_15_fu_296_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                shift_1_reg_166 <= shift_reg_133;
            end if; 
        end if;
    end process;

    shift_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                shift_reg_133 <= ap_const_lv32_0;
            elsif (((tmp_1_fu_377_p2 = ap_const_lv1_1) and (tmp_15_reg_498 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_reg_133 <= shift_2_fu_336_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c_0_s_reg_88 <= c_1_1_fu_280_p3;
                c_1_s_reg_100 <= c_1_2_fu_288_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_502 <= i_1_fu_304_p2;
                tmp_15_reg_498 <= i2_reg_145(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_fu_296_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                isNeg_reg_514 <= sh_assign_fu_314_p3(31 downto 31);
                sh_assign_reg_507 <= sh_assign_fu_314_p3;
                tmp_5_reg_520 <= tmp_5_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                out_bits_0_V_reg_470 <= out_bits_0_V_fu_194_p5;
                p_Result_s_reg_475 <= p_Result_s_fu_218_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_15_reg_498 = ap_const_lv1_1) or (tmp_1_fu_377_p2 = ap_const_lv1_0)))) then
                tmp_3_reg_540 <= tmp_3_fu_382_p2;
            end if;
        end if;
    end process;
    ap_return_preg(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_230_p2, tmp_15_reg_498, ap_CS_fsm_state4, tmp_1_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_15_reg_498 = ap_const_lv1_1) or (tmp_1_fu_377_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, result_write_assign_fu_455_p1, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return <= result_write_assign_fu_455_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    
    c_0_fu_272_p3_proc : process(p_Result_22_fu_264_p3)
    begin
        c_0_fu_272_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_22_fu_264_p3(i) = '1' then
                c_0_fu_272_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    c_1_1_fu_280_p3 <= 
        c_0_s_reg_88 when (tmp_14_fu_242_p1(0) = '1') else 
        c_0_fu_272_p3;
    c_1_2_fu_288_p3 <= 
        c_0_fu_272_p3 when (tmp_14_fu_242_p1(0) = '1') else 
        c_1_s_reg_100;
    exitcond_fu_230_p2 <= "1" when (i1_reg_112 = ap_const_lv2_2) else "0";
    i_1_fu_304_p2 <= std_logic_vector(unsigned(i2_reg_145) + unsigned(ap_const_lv2_1));
    i_fu_236_p2 <= std_logic_vector(unsigned(i1_reg_112) + unsigned(ap_const_lv2_1));
    newexp_fu_396_p2 <= std_logic_vector(signed(tmp_2_cast_fu_392_p1) - signed(shift_1_reg_166));
    or_cond_fu_410_p2 <= (tmp_3_reg_540 or tmp_21_fu_402_p3);
    out_bits_0_V_fu_194_p5 <= (tmp_fu_186_p3 & ap_const_lv32_0(14 downto 0));
    out_exp_V_fu_437_p3 <= 
        ap_const_lv8_0 when (or_cond_fu_410_p2(0) = '1') else 
        tmp_22_fu_415_p1;
    p_Result_1_fu_176_p4 <= in_V(28 downto 13);
    p_Result_22_fu_264_p3 <= 
        tmp_8_fu_246_p4 when (tmp_14_fu_242_p1(0) = '1') else 
        tmp_9_fu_255_p4;
    p_Result_23_fu_445_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_437_p3) & significand_V_fu_429_p3);
    p_Result_s_fu_218_p5 <= (tmp_4_fu_210_p3 & ap_const_lv32_0(17 downto 0));
    phitmp1_fu_419_p4 <= p_Val2_s_reg_156(27 downto 5);
    r_V_fu_370_p3 <= 
        tmp_18_fu_362_p1 when (isNeg_reg_514(0) = '1') else 
        tmp_19_fu_366_p1;
    result_write_assign_fu_455_p1 <= p_Result_23_fu_445_p4;
    sh_assign_fu_314_p3 <= 
        c_1_s_reg_100 when (tmp_16_fu_310_p1(0) = '1') else 
        c_0_s_reg_88;
    shift_2_fu_336_p2 <= std_logic_vector(unsigned(sh_assign_reg_507) + unsigned(shift_reg_133));
    significand_V_fu_429_p3 <= 
        ap_const_lv23_0 when (or_cond_fu_410_p2(0) = '1') else 
        phitmp1_fu_419_p4;
    tmp_13_fu_206_p1 <= in_V(13 - 1 downto 0);
    tmp_14_fu_242_p1 <= i1_reg_112(1 - 1 downto 0);
    tmp_15_fu_296_p3 <= i2_reg_145(1 downto 1);
    tmp_16_fu_310_p1 <= i2_reg_145(1 - 1 downto 0);
    tmp_18_fu_362_p1 <= tmp_7_fu_350_p2(29 - 1 downto 0);
    tmp_19_fu_366_p1 <= tmp_s_fu_356_p2(29 - 1 downto 0);
    tmp_1_fu_377_p2 <= "1" when (sh_assign_reg_507 = ap_const_lv32_10) else "0";
    tmp_21_fu_402_p3 <= newexp_fu_396_p2(31 downto 31);
    tmp_22_fu_415_p1 <= newexp_fu_396_p2(8 - 1 downto 0);
        tmp_2_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_387_p2),32));

    tmp_2_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv9_7F) - unsigned(prescale));
    tmp_3_fu_382_p2 <= "1" when (in_V = ap_const_lv29_0) else "0";
    tmp_4_fu_210_p3 <= (tmp_13_fu_206_p1 & ap_const_lv1_1);
    tmp_5_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sh_assign_fu_314_p3));
    tmp_6_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_123),32));
    tmp_7_fu_350_p2 <= std_logic_vector(shift_right(unsigned(tmp_6_fu_346_p1),to_integer(unsigned('0' & ush_fu_341_p3(31-1 downto 0)))));
    
    tmp_8_fu_246_p4_proc : process(p_Result_s_reg_475)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_8_fu_246_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_s_reg_475;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_8_fu_246_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_8_fu_246_p4_i) := p_Result_s_reg_475(32-1-tmp_8_fu_246_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_246_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_9_fu_255_p4_proc : process(out_bits_0_V_reg_470)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_9_fu_255_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_0_V_reg_470;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_9_fu_255_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_9_fu_255_p4_i) := out_bits_0_V_reg_470(32-1-tmp_9_fu_255_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_255_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_186_p3 <= (p_Result_1_fu_176_p4 & ap_const_lv1_1);
    tmp_s_fu_356_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_fu_346_p1),to_integer(unsigned('0' & ush_fu_341_p3(31-1 downto 0)))));
    ush_fu_341_p3 <= 
        tmp_5_reg_520 when (isNeg_reg_514(0) = '1') else 
        sh_assign_reg_507;
end behav;
