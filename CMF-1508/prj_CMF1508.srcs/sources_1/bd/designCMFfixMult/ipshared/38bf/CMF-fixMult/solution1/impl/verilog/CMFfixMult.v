// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CMFfixMult,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=39,HLS_SYN_LUT=333,HLS_VERSION=2018_3}" *)

module CMFfixMult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        EntradaA1_V,
        EntradaA2_V,
        EntradaB1_V,
        EntradaB2_V,
        SaidaA1_V,
        SaidaA1_V_ap_vld,
        SaidaA2_V,
        SaidaA2_V_ap_vld,
        SaidaB1_V,
        SaidaB1_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] EntradaA1_V;
input  [17:0] EntradaA2_V;
input  [8:0] EntradaB1_V;
input  [8:0] EntradaB2_V;
output  [17:0] SaidaA1_V;
output   SaidaA1_V_ap_vld;
output  [17:0] SaidaA2_V;
output   SaidaA2_V_ap_vld;
output  [8:0] SaidaB1_V;
output   SaidaB1_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg SaidaA1_V_ap_vld;
reg SaidaA2_V_ap_vld;
reg SaidaB1_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_Result_s_reg_387;
reg   [17:0] p_Val2_1_reg_393;
reg   [0:0] p_Result_1_reg_399;
reg   [5:0] p_Result_2_reg_405;
reg   [8:0] p_Val2_3_reg_411;
wire   [0:0] overflow_1_fu_228_p2;
reg   [0:0] overflow_1_reg_417;
wire   [0:0] underflow_1_fu_252_p2;
reg   [0:0] underflow_1_reg_423;
wire   [17:0] r_V_5_fu_167_p2;
wire    ap_CS_fsm_state2;
wire  signed [35:0] r_V_4_fu_377_p2;
wire  signed [8:0] r_V_5_fu_167_p0;
wire  signed [8:0] r_V_5_fu_167_p1;
wire   [2:0] p_Result_5_fu_200_p4;
wire   [0:0] p_Result_4_fu_192_p3;
wire   [0:0] p_not2_fu_210_p2;
wire   [0:0] p_Result_3_fu_174_p3;
wire   [0:0] brmerge4_fu_216_p2;
wire   [0:0] tmp_s_fu_222_p2;
wire   [0:0] p_not3_fu_240_p2;
wire   [0:0] newsignbit_i_i_i_i1_fu_234_p2;
wire   [0:0] brmerge5_fu_246_p2;
wire   [0:0] p_not_fu_258_p2;
wire   [0:0] brmerge_fu_263_p2;
wire   [0:0] tmp_4_fu_268_p2;
wire   [0:0] p_not1_fu_284_p2;
wire   [0:0] newsignbit_i_i_i_i_fu_279_p2;
wire   [0:0] brmerge1_fu_289_p2;
wire   [0:0] underflow_fu_295_p2;
wire   [0:0] overflow_fu_273_p2;
wire   [0:0] p_342_not_fu_306_p2;
wire   [0:0] brmerge2_fu_300_p2;
wire   [0:0] brmerge3_fu_312_p2;
wire   [17:0] p_mux_fu_318_p3;
wire   [17:0] p_s_fu_325_p3;
wire   [0:0] p_344_not_fu_345_p2;
wire   [0:0] brmerge6_fu_341_p2;
wire   [0:0] brmerge7_fu_350_p2;
wire   [8:0] p_mux1_fu_355_p3;
wire   [8:0] p_5_fu_362_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

CMFfixMult_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
CMFfixMult_mul_mubkb_U1(
    .din0(EntradaA2_V),
    .din1(EntradaA1_V),
    .dout(r_V_4_fu_377_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        overflow_1_reg_417 <= overflow_1_fu_228_p2;
        p_Result_1_reg_399 <= r_V_4_fu_377_p2[32'd29];
        p_Result_2_reg_405 <= {{r_V_4_fu_377_p2[35:30]}};
        p_Result_s_reg_387 <= r_V_4_fu_377_p2[32'd35];
        p_Val2_1_reg_393 <= {{r_V_4_fu_377_p2[29:12]}};
        p_Val2_3_reg_411 <= {{r_V_5_fu_167_p2[14:6]}};
        underflow_1_reg_423 <= underflow_1_fu_252_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SaidaA1_V_ap_vld = 1'b1;
    end else begin
        SaidaA1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        SaidaA2_V_ap_vld = 1'b1;
    end else begin
        SaidaA2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SaidaB1_V_ap_vld = 1'b1;
    end else begin
        SaidaB1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SaidaA1_V = ((brmerge3_fu_312_p2[0:0] === 1'b1) ? p_mux_fu_318_p3 : p_s_fu_325_p3);

assign SaidaA2_V = r_V_5_fu_167_p2;

assign SaidaB1_V = ((brmerge7_fu_350_p2[0:0] === 1'b1) ? p_mux1_fu_355_p3 : p_5_fu_362_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign brmerge1_fu_289_p2 = (p_not1_fu_284_p2 | newsignbit_i_i_i_i_fu_279_p2);

assign brmerge2_fu_300_p2 = (underflow_fu_295_p2 | overflow_fu_273_p2);

assign brmerge3_fu_312_p2 = (p_342_not_fu_306_p2 | overflow_fu_273_p2);

assign brmerge4_fu_216_p2 = (p_not2_fu_210_p2 | p_Result_4_fu_192_p3);

assign brmerge5_fu_246_p2 = (p_not3_fu_240_p2 | newsignbit_i_i_i_i1_fu_234_p2);

assign brmerge6_fu_341_p2 = (underflow_1_reg_423 | overflow_1_reg_417);

assign brmerge7_fu_350_p2 = (p_344_not_fu_345_p2 | overflow_1_reg_417);

assign brmerge_fu_263_p2 = (p_not_fu_258_p2 | p_Result_1_reg_399);

assign newsignbit_i_i_i_i1_fu_234_p2 = (p_Result_4_fu_192_p3 ^ 1'd1);

assign newsignbit_i_i_i_i_fu_279_p2 = (p_Result_1_reg_399 ^ 1'd1);

assign overflow_1_fu_228_p2 = (tmp_s_fu_222_p2 & brmerge4_fu_216_p2);

assign overflow_fu_273_p2 = (tmp_4_fu_268_p2 & brmerge_fu_263_p2);

assign p_342_not_fu_306_p2 = (underflow_fu_295_p2 ^ 1'd1);

assign p_344_not_fu_345_p2 = (underflow_1_reg_423 ^ 1'd1);

assign p_5_fu_362_p3 = ((underflow_1_reg_423[0:0] === 1'b1) ? 9'd256 : p_Val2_3_reg_411);

assign p_Result_3_fu_174_p3 = r_V_5_fu_167_p2[32'd17];

assign p_Result_4_fu_192_p3 = r_V_5_fu_167_p2[32'd14];

assign p_Result_5_fu_200_p4 = {{r_V_5_fu_167_p2[17:15]}};

assign p_mux1_fu_355_p3 = ((brmerge6_fu_341_p2[0:0] === 1'b1) ? 9'd255 : p_Val2_3_reg_411);

assign p_mux_fu_318_p3 = ((brmerge2_fu_300_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_1_reg_393);

assign p_not1_fu_284_p2 = ((p_Result_2_reg_405 != 6'd63) ? 1'b1 : 1'b0);

assign p_not2_fu_210_p2 = ((p_Result_5_fu_200_p4 != 3'd0) ? 1'b1 : 1'b0);

assign p_not3_fu_240_p2 = ((p_Result_5_fu_200_p4 != 3'd7) ? 1'b1 : 1'b0);

assign p_not_fu_258_p2 = ((p_Result_2_reg_405 != 6'd0) ? 1'b1 : 1'b0);

assign p_s_fu_325_p3 = ((underflow_fu_295_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_1_reg_393);

assign r_V_5_fu_167_p0 = EntradaB2_V;

assign r_V_5_fu_167_p1 = EntradaB1_V;

assign r_V_5_fu_167_p2 = ($signed(r_V_5_fu_167_p0) * $signed(r_V_5_fu_167_p1));

assign tmp_4_fu_268_p2 = (p_Result_s_reg_387 ^ 1'd1);

assign tmp_s_fu_222_p2 = (p_Result_3_fu_174_p3 ^ 1'd1);

assign underflow_1_fu_252_p2 = (p_Result_3_fu_174_p3 & brmerge5_fu_246_p2);

assign underflow_fu_295_p2 = (p_Result_s_reg_387 & brmerge1_fu_289_p2);

endmodule //CMFfixMult
