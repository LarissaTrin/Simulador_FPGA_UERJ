-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CMFfixMult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    EntradaA1_V : IN STD_LOGIC_VECTOR (17 downto 0);
    EntradaA2_V : IN STD_LOGIC_VECTOR (17 downto 0);
    EntradaB1_V : IN STD_LOGIC_VECTOR (8 downto 0);
    EntradaB2_V : IN STD_LOGIC_VECTOR (8 downto 0);
    SaidaA1_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    SaidaA1_V_ap_vld : OUT STD_LOGIC;
    SaidaA2_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    SaidaA2_V_ap_vld : OUT STD_LOGIC;
    SaidaB1_V : OUT STD_LOGIC_VECTOR (8 downto 0);
    SaidaB1_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of CMFfixMult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CMFfixMult,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=39,HLS_SYN_LUT=333,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Result_s_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_reg_393 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_1_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_405 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal overflow_1_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_167_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_4_fu_377_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_5_fu_167_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_5_fu_167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_fu_200_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_4_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not2_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge4_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not3_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_i_i_i_i1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_i_i_i_i_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_342_not_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge3_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_318_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_s_fu_325_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_344_not_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge6_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge7_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux1_fu_355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_5_fu_362_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component CMFfixMult_mul_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    CMFfixMult_mul_mubkb_U1 : component CMFfixMult_mul_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => EntradaA2_V,
        din1 => EntradaA1_V,
        dout => r_V_4_fu_377_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                overflow_1_reg_417 <= overflow_1_fu_228_p2;
                p_Result_1_reg_399 <= r_V_4_fu_377_p2(29 downto 29);
                p_Result_2_reg_405 <= r_V_4_fu_377_p2(35 downto 30);
                p_Result_s_reg_387 <= r_V_4_fu_377_p2(35 downto 35);
                p_Val2_1_reg_393 <= r_V_4_fu_377_p2(29 downto 12);
                p_Val2_3_reg_411 <= r_V_5_fu_167_p2(14 downto 6);
                underflow_1_reg_423 <= underflow_1_fu_252_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    SaidaA1_V <= 
        p_mux_fu_318_p3 when (brmerge3_fu_312_p2(0) = '1') else 
        p_s_fu_325_p3;

    SaidaA1_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SaidaA1_V_ap_vld <= ap_const_logic_1;
        else 
            SaidaA1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    SaidaA2_V <= r_V_5_fu_167_p2;

    SaidaA2_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            SaidaA2_V_ap_vld <= ap_const_logic_1;
        else 
            SaidaA2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    SaidaB1_V <= 
        p_mux1_fu_355_p3 when (brmerge7_fu_350_p2(0) = '1') else 
        p_5_fu_362_p3;

    SaidaB1_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SaidaB1_V_ap_vld <= ap_const_logic_1;
        else 
            SaidaB1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_fu_289_p2 <= (p_not1_fu_284_p2 or newsignbit_i_i_i_i_fu_279_p2);
    brmerge2_fu_300_p2 <= (underflow_fu_295_p2 or overflow_fu_273_p2);
    brmerge3_fu_312_p2 <= (p_342_not_fu_306_p2 or overflow_fu_273_p2);
    brmerge4_fu_216_p2 <= (p_not2_fu_210_p2 or p_Result_4_fu_192_p3);
    brmerge5_fu_246_p2 <= (p_not3_fu_240_p2 or newsignbit_i_i_i_i1_fu_234_p2);
    brmerge6_fu_341_p2 <= (underflow_1_reg_423 or overflow_1_reg_417);
    brmerge7_fu_350_p2 <= (p_344_not_fu_345_p2 or overflow_1_reg_417);
    brmerge_fu_263_p2 <= (p_not_fu_258_p2 or p_Result_1_reg_399);
    newsignbit_i_i_i_i1_fu_234_p2 <= (p_Result_4_fu_192_p3 xor ap_const_lv1_1);
    newsignbit_i_i_i_i_fu_279_p2 <= (p_Result_1_reg_399 xor ap_const_lv1_1);
    overflow_1_fu_228_p2 <= (tmp_s_fu_222_p2 and brmerge4_fu_216_p2);
    overflow_fu_273_p2 <= (tmp_4_fu_268_p2 and brmerge_fu_263_p2);
    p_342_not_fu_306_p2 <= (underflow_fu_295_p2 xor ap_const_lv1_1);
    p_344_not_fu_345_p2 <= (underflow_1_reg_423 xor ap_const_lv1_1);
    p_5_fu_362_p3 <= 
        ap_const_lv9_100 when (underflow_1_reg_423(0) = '1') else 
        p_Val2_3_reg_411;
    p_Result_3_fu_174_p3 <= r_V_5_fu_167_p2(17 downto 17);
    p_Result_4_fu_192_p3 <= r_V_5_fu_167_p2(14 downto 14);
    p_Result_5_fu_200_p4 <= r_V_5_fu_167_p2(17 downto 15);
    p_mux1_fu_355_p3 <= 
        ap_const_lv9_FF when (brmerge6_fu_341_p2(0) = '1') else 
        p_Val2_3_reg_411;
    p_mux_fu_318_p3 <= 
        ap_const_lv18_1FFFF when (brmerge2_fu_300_p2(0) = '1') else 
        p_Val2_1_reg_393;
    p_not1_fu_284_p2 <= "0" when (p_Result_2_reg_405 = ap_const_lv6_3F) else "1";
    p_not2_fu_210_p2 <= "0" when (p_Result_5_fu_200_p4 = ap_const_lv3_0) else "1";
    p_not3_fu_240_p2 <= "0" when (p_Result_5_fu_200_p4 = ap_const_lv3_7) else "1";
    p_not_fu_258_p2 <= "0" when (p_Result_2_reg_405 = ap_const_lv6_0) else "1";
    p_s_fu_325_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_295_p2(0) = '1') else 
        p_Val2_1_reg_393;
    r_V_5_fu_167_p0 <= EntradaB2_V;
    r_V_5_fu_167_p1 <= EntradaB1_V;
    r_V_5_fu_167_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_5_fu_167_p0) * signed(r_V_5_fu_167_p1))), 18));
    tmp_4_fu_268_p2 <= (p_Result_s_reg_387 xor ap_const_lv1_1);
    tmp_s_fu_222_p2 <= (p_Result_3_fu_174_p3 xor ap_const_lv1_1);
    underflow_1_fu_252_p2 <= (p_Result_3_fu_174_p3 and brmerge5_fu_246_p2);
    underflow_fu_295_p2 <= (p_Result_s_reg_387 and brmerge1_fu_289_p2);
end behav;
