// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _CMFfixMult_HH_
#define _CMFfixMult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CMFfixMult_mul_mubkb.h"

namespace ap_rtl {

struct CMFfixMult : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<18> > EntradaA1_V;
    sc_in< sc_lv<18> > EntradaA2_V;
    sc_in< sc_lv<9> > EntradaB1_V;
    sc_in< sc_lv<9> > EntradaB2_V;
    sc_out< sc_lv<18> > SaidaA1_V;
    sc_out< sc_logic > SaidaA1_V_ap_vld;
    sc_out< sc_lv<18> > SaidaA2_V;
    sc_out< sc_logic > SaidaA2_V_ap_vld;
    sc_out< sc_lv<9> > SaidaB1_V;
    sc_out< sc_logic > SaidaB1_V_ap_vld;


    // Module declarations
    CMFfixMult(sc_module_name name);
    SC_HAS_PROCESS(CMFfixMult);

    ~CMFfixMult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    CMFfixMult_mul_mubkb<1,1,18,18,36>* CMFfixMult_mul_mubkb_U1;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > p_Result_s_reg_387;
    sc_signal< sc_lv<18> > p_Val2_1_reg_393;
    sc_signal< sc_lv<1> > p_Result_1_reg_399;
    sc_signal< sc_lv<6> > p_Result_2_reg_405;
    sc_signal< sc_lv<9> > p_Val2_3_reg_411;
    sc_signal< sc_lv<1> > overflow_1_fu_228_p2;
    sc_signal< sc_lv<1> > overflow_1_reg_417;
    sc_signal< sc_lv<1> > underflow_1_fu_252_p2;
    sc_signal< sc_lv<1> > underflow_1_reg_423;
    sc_signal< sc_lv<18> > r_V_5_fu_167_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<36> > r_V_4_fu_377_p2;
    sc_signal< sc_lv<9> > r_V_5_fu_167_p0;
    sc_signal< sc_lv<9> > r_V_5_fu_167_p1;
    sc_signal< sc_lv<3> > p_Result_5_fu_200_p4;
    sc_signal< sc_lv<1> > p_Result_4_fu_192_p3;
    sc_signal< sc_lv<1> > p_not2_fu_210_p2;
    sc_signal< sc_lv<1> > p_Result_3_fu_174_p3;
    sc_signal< sc_lv<1> > brmerge4_fu_216_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_222_p2;
    sc_signal< sc_lv<1> > p_not3_fu_240_p2;
    sc_signal< sc_lv<1> > newsignbit_i_i_i_i1_fu_234_p2;
    sc_signal< sc_lv<1> > brmerge5_fu_246_p2;
    sc_signal< sc_lv<1> > p_not_fu_258_p2;
    sc_signal< sc_lv<1> > brmerge_fu_263_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_268_p2;
    sc_signal< sc_lv<1> > p_not1_fu_284_p2;
    sc_signal< sc_lv<1> > newsignbit_i_i_i_i_fu_279_p2;
    sc_signal< sc_lv<1> > brmerge1_fu_289_p2;
    sc_signal< sc_lv<1> > underflow_fu_295_p2;
    sc_signal< sc_lv<1> > overflow_fu_273_p2;
    sc_signal< sc_lv<1> > p_342_not_fu_306_p2;
    sc_signal< sc_lv<1> > brmerge2_fu_300_p2;
    sc_signal< sc_lv<1> > brmerge3_fu_312_p2;
    sc_signal< sc_lv<18> > p_mux_fu_318_p3;
    sc_signal< sc_lv<18> > p_s_fu_325_p3;
    sc_signal< sc_lv<1> > p_344_not_fu_345_p2;
    sc_signal< sc_lv<1> > brmerge6_fu_341_p2;
    sc_signal< sc_lv<1> > brmerge7_fu_350_p2;
    sc_signal< sc_lv<9> > p_mux1_fu_355_p3;
    sc_signal< sc_lv<9> > p_5_fu_362_p3;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<18> ap_const_lv18_1FFFF;
    static const sc_lv<18> ap_const_lv18_20000;
    static const sc_lv<9> ap_const_lv9_FF;
    static const sc_lv<9> ap_const_lv9_100;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_SaidaA1_V();
    void thread_SaidaA1_V_ap_vld();
    void thread_SaidaA2_V();
    void thread_SaidaA2_V_ap_vld();
    void thread_SaidaB1_V();
    void thread_SaidaB1_V_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_brmerge1_fu_289_p2();
    void thread_brmerge2_fu_300_p2();
    void thread_brmerge3_fu_312_p2();
    void thread_brmerge4_fu_216_p2();
    void thread_brmerge5_fu_246_p2();
    void thread_brmerge6_fu_341_p2();
    void thread_brmerge7_fu_350_p2();
    void thread_brmerge_fu_263_p2();
    void thread_newsignbit_i_i_i_i1_fu_234_p2();
    void thread_newsignbit_i_i_i_i_fu_279_p2();
    void thread_overflow_1_fu_228_p2();
    void thread_overflow_fu_273_p2();
    void thread_p_342_not_fu_306_p2();
    void thread_p_344_not_fu_345_p2();
    void thread_p_5_fu_362_p3();
    void thread_p_Result_3_fu_174_p3();
    void thread_p_Result_4_fu_192_p3();
    void thread_p_Result_5_fu_200_p4();
    void thread_p_mux1_fu_355_p3();
    void thread_p_mux_fu_318_p3();
    void thread_p_not1_fu_284_p2();
    void thread_p_not2_fu_210_p2();
    void thread_p_not3_fu_240_p2();
    void thread_p_not_fu_258_p2();
    void thread_p_s_fu_325_p3();
    void thread_r_V_5_fu_167_p0();
    void thread_r_V_5_fu_167_p1();
    void thread_r_V_5_fu_167_p2();
    void thread_tmp_4_fu_268_p2();
    void thread_tmp_s_fu_222_p2();
    void thread_underflow_1_fu_252_p2();
    void thread_underflow_fu_295_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
