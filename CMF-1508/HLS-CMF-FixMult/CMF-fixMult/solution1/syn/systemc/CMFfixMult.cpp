// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "CMFfixMult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic CMFfixMult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic CMFfixMult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> CMFfixMult::ap_ST_fsm_state1 = "1";
const sc_lv<2> CMFfixMult::ap_ST_fsm_state2 = "10";
const sc_lv<32> CMFfixMult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> CMFfixMult::ap_const_lv32_1 = "1";
const sc_lv<32> CMFfixMult::ap_const_lv32_23 = "100011";
const sc_lv<32> CMFfixMult::ap_const_lv32_C = "1100";
const sc_lv<32> CMFfixMult::ap_const_lv32_1D = "11101";
const sc_lv<32> CMFfixMult::ap_const_lv32_1E = "11110";
const sc_lv<32> CMFfixMult::ap_const_lv32_11 = "10001";
const sc_lv<32> CMFfixMult::ap_const_lv32_6 = "110";
const sc_lv<32> CMFfixMult::ap_const_lv32_E = "1110";
const sc_lv<32> CMFfixMult::ap_const_lv32_F = "1111";
const sc_lv<3> CMFfixMult::ap_const_lv3_0 = "000";
const sc_lv<1> CMFfixMult::ap_const_lv1_1 = "1";
const sc_lv<3> CMFfixMult::ap_const_lv3_7 = "111";
const sc_lv<6> CMFfixMult::ap_const_lv6_0 = "000000";
const sc_lv<6> CMFfixMult::ap_const_lv6_3F = "111111";
const sc_lv<18> CMFfixMult::ap_const_lv18_1FFFF = "11111111111111111";
const sc_lv<18> CMFfixMult::ap_const_lv18_20000 = "100000000000000000";
const sc_lv<9> CMFfixMult::ap_const_lv9_FF = "11111111";
const sc_lv<9> CMFfixMult::ap_const_lv9_100 = "100000000";
const bool CMFfixMult::ap_const_boolean_1 = true;

CMFfixMult::CMFfixMult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    CMFfixMult_mul_mubkb_U1 = new CMFfixMult_mul_mubkb<1,1,18,18,36>("CMFfixMult_mul_mubkb_U1");
    CMFfixMult_mul_mubkb_U1->din0(EntradaA2_V);
    CMFfixMult_mul_mubkb_U1->din1(EntradaA1_V);
    CMFfixMult_mul_mubkb_U1->dout(r_V_4_fu_377_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SaidaA1_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge3_fu_312_p2 );
    sensitive << ( p_mux_fu_318_p3 );
    sensitive << ( p_s_fu_325_p3 );

    SC_METHOD(thread_SaidaA1_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_SaidaA2_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( r_V_5_fu_167_p2 );

    SC_METHOD(thread_SaidaA2_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_SaidaB1_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge7_fu_350_p2 );
    sensitive << ( p_mux1_fu_355_p3 );
    sensitive << ( p_5_fu_362_p3 );

    SC_METHOD(thread_SaidaB1_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_brmerge1_fu_289_p2);
    sensitive << ( p_not1_fu_284_p2 );
    sensitive << ( newsignbit_i_i_i_i_fu_279_p2 );

    SC_METHOD(thread_brmerge2_fu_300_p2);
    sensitive << ( underflow_fu_295_p2 );
    sensitive << ( overflow_fu_273_p2 );

    SC_METHOD(thread_brmerge3_fu_312_p2);
    sensitive << ( overflow_fu_273_p2 );
    sensitive << ( p_342_not_fu_306_p2 );

    SC_METHOD(thread_brmerge4_fu_216_p2);
    sensitive << ( p_Result_4_fu_192_p3 );
    sensitive << ( p_not2_fu_210_p2 );

    SC_METHOD(thread_brmerge5_fu_246_p2);
    sensitive << ( p_not3_fu_240_p2 );
    sensitive << ( newsignbit_i_i_i_i1_fu_234_p2 );

    SC_METHOD(thread_brmerge6_fu_341_p2);
    sensitive << ( overflow_1_reg_417 );
    sensitive << ( underflow_1_reg_423 );

    SC_METHOD(thread_brmerge7_fu_350_p2);
    sensitive << ( overflow_1_reg_417 );
    sensitive << ( p_344_not_fu_345_p2 );

    SC_METHOD(thread_brmerge_fu_263_p2);
    sensitive << ( p_Result_1_reg_399 );
    sensitive << ( p_not_fu_258_p2 );

    SC_METHOD(thread_newsignbit_i_i_i_i1_fu_234_p2);
    sensitive << ( p_Result_4_fu_192_p3 );

    SC_METHOD(thread_newsignbit_i_i_i_i_fu_279_p2);
    sensitive << ( p_Result_1_reg_399 );

    SC_METHOD(thread_overflow_1_fu_228_p2);
    sensitive << ( brmerge4_fu_216_p2 );
    sensitive << ( tmp_s_fu_222_p2 );

    SC_METHOD(thread_overflow_fu_273_p2);
    sensitive << ( brmerge_fu_263_p2 );
    sensitive << ( tmp_4_fu_268_p2 );

    SC_METHOD(thread_p_342_not_fu_306_p2);
    sensitive << ( underflow_fu_295_p2 );

    SC_METHOD(thread_p_344_not_fu_345_p2);
    sensitive << ( underflow_1_reg_423 );

    SC_METHOD(thread_p_5_fu_362_p3);
    sensitive << ( p_Val2_3_reg_411 );
    sensitive << ( underflow_1_reg_423 );

    SC_METHOD(thread_p_Result_3_fu_174_p3);
    sensitive << ( r_V_5_fu_167_p2 );

    SC_METHOD(thread_p_Result_4_fu_192_p3);
    sensitive << ( r_V_5_fu_167_p2 );

    SC_METHOD(thread_p_Result_5_fu_200_p4);
    sensitive << ( r_V_5_fu_167_p2 );

    SC_METHOD(thread_p_mux1_fu_355_p3);
    sensitive << ( p_Val2_3_reg_411 );
    sensitive << ( brmerge6_fu_341_p2 );

    SC_METHOD(thread_p_mux_fu_318_p3);
    sensitive << ( p_Val2_1_reg_393 );
    sensitive << ( brmerge2_fu_300_p2 );

    SC_METHOD(thread_p_not1_fu_284_p2);
    sensitive << ( p_Result_2_reg_405 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_not2_fu_210_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_Result_5_fu_200_p4 );

    SC_METHOD(thread_p_not3_fu_240_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_Result_5_fu_200_p4 );

    SC_METHOD(thread_p_not_fu_258_p2);
    sensitive << ( p_Result_2_reg_405 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_s_fu_325_p3);
    sensitive << ( p_Val2_1_reg_393 );
    sensitive << ( underflow_fu_295_p2 );

    SC_METHOD(thread_r_V_5_fu_167_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( EntradaB2_V );

    SC_METHOD(thread_r_V_5_fu_167_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( EntradaB1_V );

    SC_METHOD(thread_r_V_5_fu_167_p2);
    sensitive << ( r_V_5_fu_167_p0 );
    sensitive << ( r_V_5_fu_167_p1 );

    SC_METHOD(thread_tmp_4_fu_268_p2);
    sensitive << ( p_Result_s_reg_387 );

    SC_METHOD(thread_tmp_s_fu_222_p2);
    sensitive << ( p_Result_3_fu_174_p3 );

    SC_METHOD(thread_underflow_1_fu_252_p2);
    sensitive << ( p_Result_3_fu_174_p3 );
    sensitive << ( brmerge5_fu_246_p2 );

    SC_METHOD(thread_underflow_fu_295_p2);
    sensitive << ( p_Result_s_reg_387 );
    sensitive << ( brmerge1_fu_289_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "CMFfixMult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, EntradaA1_V, "(port)EntradaA1_V");
    sc_trace(mVcdFile, EntradaA2_V, "(port)EntradaA2_V");
    sc_trace(mVcdFile, EntradaB1_V, "(port)EntradaB1_V");
    sc_trace(mVcdFile, EntradaB2_V, "(port)EntradaB2_V");
    sc_trace(mVcdFile, SaidaA1_V, "(port)SaidaA1_V");
    sc_trace(mVcdFile, SaidaA1_V_ap_vld, "(port)SaidaA1_V_ap_vld");
    sc_trace(mVcdFile, SaidaA2_V, "(port)SaidaA2_V");
    sc_trace(mVcdFile, SaidaA2_V_ap_vld, "(port)SaidaA2_V_ap_vld");
    sc_trace(mVcdFile, SaidaB1_V, "(port)SaidaB1_V");
    sc_trace(mVcdFile, SaidaB1_V_ap_vld, "(port)SaidaB1_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_Result_s_reg_387, "p_Result_s_reg_387");
    sc_trace(mVcdFile, p_Val2_1_reg_393, "p_Val2_1_reg_393");
    sc_trace(mVcdFile, p_Result_1_reg_399, "p_Result_1_reg_399");
    sc_trace(mVcdFile, p_Result_2_reg_405, "p_Result_2_reg_405");
    sc_trace(mVcdFile, p_Val2_3_reg_411, "p_Val2_3_reg_411");
    sc_trace(mVcdFile, overflow_1_fu_228_p2, "overflow_1_fu_228_p2");
    sc_trace(mVcdFile, overflow_1_reg_417, "overflow_1_reg_417");
    sc_trace(mVcdFile, underflow_1_fu_252_p2, "underflow_1_fu_252_p2");
    sc_trace(mVcdFile, underflow_1_reg_423, "underflow_1_reg_423");
    sc_trace(mVcdFile, r_V_5_fu_167_p2, "r_V_5_fu_167_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, r_V_4_fu_377_p2, "r_V_4_fu_377_p2");
    sc_trace(mVcdFile, r_V_5_fu_167_p0, "r_V_5_fu_167_p0");
    sc_trace(mVcdFile, r_V_5_fu_167_p1, "r_V_5_fu_167_p1");
    sc_trace(mVcdFile, p_Result_5_fu_200_p4, "p_Result_5_fu_200_p4");
    sc_trace(mVcdFile, p_Result_4_fu_192_p3, "p_Result_4_fu_192_p3");
    sc_trace(mVcdFile, p_not2_fu_210_p2, "p_not2_fu_210_p2");
    sc_trace(mVcdFile, p_Result_3_fu_174_p3, "p_Result_3_fu_174_p3");
    sc_trace(mVcdFile, brmerge4_fu_216_p2, "brmerge4_fu_216_p2");
    sc_trace(mVcdFile, tmp_s_fu_222_p2, "tmp_s_fu_222_p2");
    sc_trace(mVcdFile, p_not3_fu_240_p2, "p_not3_fu_240_p2");
    sc_trace(mVcdFile, newsignbit_i_i_i_i1_fu_234_p2, "newsignbit_i_i_i_i1_fu_234_p2");
    sc_trace(mVcdFile, brmerge5_fu_246_p2, "brmerge5_fu_246_p2");
    sc_trace(mVcdFile, p_not_fu_258_p2, "p_not_fu_258_p2");
    sc_trace(mVcdFile, brmerge_fu_263_p2, "brmerge_fu_263_p2");
    sc_trace(mVcdFile, tmp_4_fu_268_p2, "tmp_4_fu_268_p2");
    sc_trace(mVcdFile, p_not1_fu_284_p2, "p_not1_fu_284_p2");
    sc_trace(mVcdFile, newsignbit_i_i_i_i_fu_279_p2, "newsignbit_i_i_i_i_fu_279_p2");
    sc_trace(mVcdFile, brmerge1_fu_289_p2, "brmerge1_fu_289_p2");
    sc_trace(mVcdFile, underflow_fu_295_p2, "underflow_fu_295_p2");
    sc_trace(mVcdFile, overflow_fu_273_p2, "overflow_fu_273_p2");
    sc_trace(mVcdFile, p_342_not_fu_306_p2, "p_342_not_fu_306_p2");
    sc_trace(mVcdFile, brmerge2_fu_300_p2, "brmerge2_fu_300_p2");
    sc_trace(mVcdFile, brmerge3_fu_312_p2, "brmerge3_fu_312_p2");
    sc_trace(mVcdFile, p_mux_fu_318_p3, "p_mux_fu_318_p3");
    sc_trace(mVcdFile, p_s_fu_325_p3, "p_s_fu_325_p3");
    sc_trace(mVcdFile, p_344_not_fu_345_p2, "p_344_not_fu_345_p2");
    sc_trace(mVcdFile, brmerge6_fu_341_p2, "brmerge6_fu_341_p2");
    sc_trace(mVcdFile, brmerge7_fu_350_p2, "brmerge7_fu_350_p2");
    sc_trace(mVcdFile, p_mux1_fu_355_p3, "p_mux1_fu_355_p3");
    sc_trace(mVcdFile, p_5_fu_362_p3, "p_5_fu_362_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("CMFfixMult.hdltvin.dat");
    mHdltvoutHandle.open("CMFfixMult.hdltvout.dat");
}

CMFfixMult::~CMFfixMult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete CMFfixMult_mul_mubkb_U1;
}

void CMFfixMult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        overflow_1_reg_417 = overflow_1_fu_228_p2.read();
        p_Result_1_reg_399 = r_V_4_fu_377_p2.read().range(29, 29);
        p_Result_2_reg_405 = r_V_4_fu_377_p2.read().range(35, 30);
        p_Result_s_reg_387 = r_V_4_fu_377_p2.read().range(35, 35);
        p_Val2_1_reg_393 = r_V_4_fu_377_p2.read().range(29, 12);
        p_Val2_3_reg_411 = r_V_5_fu_167_p2.read().range(14, 6);
        underflow_1_reg_423 = underflow_1_fu_252_p2.read();
    }
}

void CMFfixMult::thread_SaidaA1_V() {
    SaidaA1_V = (!brmerge3_fu_312_p2.read()[0].is_01())? sc_lv<18>(): ((brmerge3_fu_312_p2.read()[0].to_bool())? p_mux_fu_318_p3.read(): p_s_fu_325_p3.read());
}

void CMFfixMult::thread_SaidaA1_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        SaidaA1_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaA1_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult::thread_SaidaA2_V() {
    SaidaA2_V = r_V_5_fu_167_p2.read();
}

void CMFfixMult::thread_SaidaA2_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        SaidaA2_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaA2_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult::thread_SaidaB1_V() {
    SaidaB1_V = (!brmerge7_fu_350_p2.read()[0].is_01())? sc_lv<9>(): ((brmerge7_fu_350_p2.read()[0].to_bool())? p_mux1_fu_355_p3.read(): p_5_fu_362_p3.read());
}

void CMFfixMult::thread_SaidaB1_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        SaidaB1_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaB1_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void CMFfixMult::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void CMFfixMult::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void CMFfixMult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void CMFfixMult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void CMFfixMult::thread_brmerge1_fu_289_p2() {
    brmerge1_fu_289_p2 = (p_not1_fu_284_p2.read() | newsignbit_i_i_i_i_fu_279_p2.read());
}

void CMFfixMult::thread_brmerge2_fu_300_p2() {
    brmerge2_fu_300_p2 = (underflow_fu_295_p2.read() | overflow_fu_273_p2.read());
}

void CMFfixMult::thread_brmerge3_fu_312_p2() {
    brmerge3_fu_312_p2 = (overflow_fu_273_p2.read() | p_342_not_fu_306_p2.read());
}

void CMFfixMult::thread_brmerge4_fu_216_p2() {
    brmerge4_fu_216_p2 = (p_Result_4_fu_192_p3.read() | p_not2_fu_210_p2.read());
}

void CMFfixMult::thread_brmerge5_fu_246_p2() {
    brmerge5_fu_246_p2 = (p_not3_fu_240_p2.read() | newsignbit_i_i_i_i1_fu_234_p2.read());
}

void CMFfixMult::thread_brmerge6_fu_341_p2() {
    brmerge6_fu_341_p2 = (underflow_1_reg_423.read() | overflow_1_reg_417.read());
}

void CMFfixMult::thread_brmerge7_fu_350_p2() {
    brmerge7_fu_350_p2 = (overflow_1_reg_417.read() | p_344_not_fu_345_p2.read());
}

void CMFfixMult::thread_brmerge_fu_263_p2() {
    brmerge_fu_263_p2 = (p_Result_1_reg_399.read() | p_not_fu_258_p2.read());
}

void CMFfixMult::thread_newsignbit_i_i_i_i1_fu_234_p2() {
    newsignbit_i_i_i_i1_fu_234_p2 = (p_Result_4_fu_192_p3.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_newsignbit_i_i_i_i_fu_279_p2() {
    newsignbit_i_i_i_i_fu_279_p2 = (p_Result_1_reg_399.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_overflow_1_fu_228_p2() {
    overflow_1_fu_228_p2 = (brmerge4_fu_216_p2.read() & tmp_s_fu_222_p2.read());
}

void CMFfixMult::thread_overflow_fu_273_p2() {
    overflow_fu_273_p2 = (brmerge_fu_263_p2.read() & tmp_4_fu_268_p2.read());
}

void CMFfixMult::thread_p_342_not_fu_306_p2() {
    p_342_not_fu_306_p2 = (underflow_fu_295_p2.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_p_344_not_fu_345_p2() {
    p_344_not_fu_345_p2 = (underflow_1_reg_423.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_p_5_fu_362_p3() {
    p_5_fu_362_p3 = (!underflow_1_reg_423.read()[0].is_01())? sc_lv<9>(): ((underflow_1_reg_423.read()[0].to_bool())? ap_const_lv9_100: p_Val2_3_reg_411.read());
}

void CMFfixMult::thread_p_Result_3_fu_174_p3() {
    p_Result_3_fu_174_p3 = r_V_5_fu_167_p2.read().range(17, 17);
}

void CMFfixMult::thread_p_Result_4_fu_192_p3() {
    p_Result_4_fu_192_p3 = r_V_5_fu_167_p2.read().range(14, 14);
}

void CMFfixMult::thread_p_Result_5_fu_200_p4() {
    p_Result_5_fu_200_p4 = r_V_5_fu_167_p2.read().range(17, 15);
}

void CMFfixMult::thread_p_mux1_fu_355_p3() {
    p_mux1_fu_355_p3 = (!brmerge6_fu_341_p2.read()[0].is_01())? sc_lv<9>(): ((brmerge6_fu_341_p2.read()[0].to_bool())? ap_const_lv9_FF: p_Val2_3_reg_411.read());
}

void CMFfixMult::thread_p_mux_fu_318_p3() {
    p_mux_fu_318_p3 = (!brmerge2_fu_300_p2.read()[0].is_01())? sc_lv<18>(): ((brmerge2_fu_300_p2.read()[0].to_bool())? ap_const_lv18_1FFFF: p_Val2_1_reg_393.read());
}

void CMFfixMult::thread_p_not1_fu_284_p2() {
    p_not1_fu_284_p2 = (!p_Result_2_reg_405.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_2_reg_405.read() != ap_const_lv6_3F);
}

void CMFfixMult::thread_p_not2_fu_210_p2() {
    p_not2_fu_210_p2 = (!p_Result_5_fu_200_p4.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_5_fu_200_p4.read() != ap_const_lv3_0);
}

void CMFfixMult::thread_p_not3_fu_240_p2() {
    p_not3_fu_240_p2 = (!p_Result_5_fu_200_p4.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_5_fu_200_p4.read() != ap_const_lv3_7);
}

void CMFfixMult::thread_p_not_fu_258_p2() {
    p_not_fu_258_p2 = (!p_Result_2_reg_405.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_2_reg_405.read() != ap_const_lv6_0);
}

void CMFfixMult::thread_p_s_fu_325_p3() {
    p_s_fu_325_p3 = (!underflow_fu_295_p2.read()[0].is_01())? sc_lv<18>(): ((underflow_fu_295_p2.read()[0].to_bool())? ap_const_lv18_20000: p_Val2_1_reg_393.read());
}

void CMFfixMult::thread_r_V_5_fu_167_p0() {
    r_V_5_fu_167_p0 = EntradaB2_V.read();
}

void CMFfixMult::thread_r_V_5_fu_167_p1() {
    r_V_5_fu_167_p1 = EntradaB1_V.read();
}

void CMFfixMult::thread_r_V_5_fu_167_p2() {
    r_V_5_fu_167_p2 = (!r_V_5_fu_167_p0.read().is_01() || !r_V_5_fu_167_p1.read().is_01())? sc_lv<18>(): sc_bigint<9>(r_V_5_fu_167_p0.read()) * sc_bigint<9>(r_V_5_fu_167_p1.read());
}

void CMFfixMult::thread_tmp_4_fu_268_p2() {
    tmp_4_fu_268_p2 = (p_Result_s_reg_387.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_tmp_s_fu_222_p2() {
    tmp_s_fu_222_p2 = (p_Result_3_fu_174_p3.read() ^ ap_const_lv1_1);
}

void CMFfixMult::thread_underflow_1_fu_252_p2() {
    underflow_1_fu_252_p2 = (brmerge5_fu_246_p2.read() & p_Result_3_fu_174_p3.read());
}

void CMFfixMult::thread_underflow_fu_295_p2() {
    underflow_fu_295_p2 = (brmerge1_fu_289_p2.read() & p_Result_s_reg_387.read());
}

void CMFfixMult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void CMFfixMult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaA1_V\" :  \"" << EntradaA1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaA2_V\" :  \"" << EntradaA2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaB1_V\" :  \"" << EntradaB1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaB2_V\" :  \"" << EntradaB2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA1_V\" :  \"" << SaidaA1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA1_V_ap_vld\" :  \"" << SaidaA1_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA2_V\" :  \"" << SaidaA2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA2_V_ap_vld\" :  \"" << SaidaA2_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaB1_V\" :  \"" << SaidaB1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaB1_V_ap_vld\" :  \"" << SaidaB1_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

