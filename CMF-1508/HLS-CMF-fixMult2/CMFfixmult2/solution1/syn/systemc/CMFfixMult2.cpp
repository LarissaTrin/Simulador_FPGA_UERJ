// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "CMFfixMult2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic CMFfixMult2::ap_const_logic_1 = sc_dt::Log_1;
const bool CMFfixMult2::ap_const_boolean_1 = true;
const sc_logic CMFfixMult2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> CMFfixMult2::ap_const_lv9_161 = "101100001";
const sc_lv<32> CMFfixMult2::ap_const_lv32_C = "1100";
const sc_lv<32> CMFfixMult2::ap_const_lv32_1D = "11101";

CMFfixMult2::CMFfixMult2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    CMFfixMult2_mul_mbkb_U1 = new CMFfixMult2_mul_mbkb<1,1,18,18,30>("CMFfixMult2_mul_mbkb_U1");
    CMFfixMult2_mul_mbkb_U1->din0(EntradaA2_V);
    CMFfixMult2_mul_mbkb_U1->din1(EntradaA1_V);
    CMFfixMult2_mul_mbkb_U1->dout(r_V_fu_83_p2);

    SC_METHOD(thread_SaidaA1_V);
    sensitive << ( ap_start );
    sensitive << ( r_V_fu_83_p2 );

    SC_METHOD(thread_SaidaA1_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_SaidaA2_V);
    sensitive << ( ap_start );
    sensitive << ( r_V_fu_83_p2 );

    SC_METHOD(thread_SaidaA2_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_SaidaB1_V);
    sensitive << ( ap_start );

    SC_METHOD(thread_SaidaB1_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "CMFfixMult2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, EntradaA1_V, "(port)EntradaA1_V");
    sc_trace(mVcdFile, EntradaA2_V, "(port)EntradaA2_V");
    sc_trace(mVcdFile, SaidaA1_V, "(port)SaidaA1_V");
    sc_trace(mVcdFile, SaidaA1_V_ap_vld, "(port)SaidaA1_V_ap_vld");
    sc_trace(mVcdFile, SaidaA2_V, "(port)SaidaA2_V");
    sc_trace(mVcdFile, SaidaA2_V_ap_vld, "(port)SaidaA2_V_ap_vld");
    sc_trace(mVcdFile, SaidaB1_V, "(port)SaidaB1_V");
    sc_trace(mVcdFile, SaidaB1_V_ap_vld, "(port)SaidaB1_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, r_V_fu_83_p2, "r_V_fu_83_p2");
#endif

    }
    mHdltvinHandle.open("CMFfixMult2.hdltvin.dat");
    mHdltvoutHandle.open("CMFfixMult2.hdltvout.dat");
}

CMFfixMult2::~CMFfixMult2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete CMFfixMult2_mul_mbkb_U1;
}

void CMFfixMult2::thread_SaidaA1_V() {
    SaidaA1_V = r_V_fu_83_p2.read().range(29, 12);
}

void CMFfixMult2::thread_SaidaA1_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        SaidaA1_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaA1_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult2::thread_SaidaA2_V() {
    SaidaA2_V = r_V_fu_83_p2.read().range(29, 12);
}

void CMFfixMult2::thread_SaidaA2_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        SaidaA2_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaA2_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult2::thread_SaidaB1_V() {
    SaidaB1_V = ap_const_lv9_161;
}

void CMFfixMult2::thread_SaidaB1_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        SaidaB1_V_ap_vld = ap_const_logic_1;
    } else {
        SaidaB1_V_ap_vld = ap_const_logic_0;
    }
}

void CMFfixMult2::thread_ap_done() {
    ap_done = ap_start.read();
}

void CMFfixMult2::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void CMFfixMult2::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void CMFfixMult2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaA1_V\" :  \"" << EntradaA1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"EntradaA2_V\" :  \"" << EntradaA2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA1_V\" :  \"" << SaidaA1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA1_V_ap_vld\" :  \"" << SaidaA1_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA2_V\" :  \"" << SaidaA2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaA2_V_ap_vld\" :  \"" << SaidaA2_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaB1_V\" :  \"" << SaidaB1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"SaidaB1_V_ap_vld\" :  \"" << SaidaB1_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

