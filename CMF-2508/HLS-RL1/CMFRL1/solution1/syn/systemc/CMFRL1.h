// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _CMFRL1_HH_
#define _CMFRL1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CMFRL1_fadd_32ns_bkb.h"
#include "CMFRL1_fmul_32ns_cud.h"

namespace ap_rtl {

struct CMFRL1 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > sinc_V;
    sc_out< sc_lv<32> > i_RL;
    sc_out< sc_logic > i_RL_ap_vld;
    sc_out< sc_lv<32> > teste1;
    sc_out< sc_logic > teste1_ap_vld;
    sc_out< sc_lv<1> > teste2_V;
    sc_out< sc_logic > teste2_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const2;


    // Module declarations
    CMFRL1(sc_module_name name);
    SC_HAS_PROCESS(CMFRL1);

    ~CMFRL1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    CMFRL1_fadd_32ns_bkb<1,5,32,32,32>* CMFRL1_fadd_32ns_bkb_U1;
    CMFRL1_fmul_32ns_cud<1,4,32,32,32>* CMFRL1_fmul_32ns_cud_U2;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > aux_sinc_V;
    sc_signal< sc_lv<32> > i_kp1;
    sc_signal< sc_lv<32> > i_k;
    sc_signal< sc_lv<1> > tmp_fu_91_p2;
    sc_signal< sc_lv<1> > tmp_reg_135;
    sc_signal< sc_lv<32> > grp_fu_82_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_77_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_150;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > ap_phi_mux_i_kp1_loc_phi_fu_60_p4;
    sc_signal< sc_lv<32> > i_kp1_loc_reg_57;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > ap_phi_mux_tmp_3_phi_fu_70_p4;
    sc_signal< sc_lv<1> > tmp_3_reg_67;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3C23D70A;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3F7FBE77;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_kp1_loc_phi_fu_60_p4();
    void thread_ap_phi_mux_tmp_3_phi_fu_70_p4();
    void thread_ap_ready();
    void thread_i_RL();
    void thread_i_RL_ap_vld();
    void thread_teste1();
    void thread_teste1_ap_vld();
    void thread_teste2_V();
    void thread_teste2_V_ap_vld();
    void thread_tmp_fu_91_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
