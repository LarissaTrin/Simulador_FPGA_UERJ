// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "CMFRL1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic CMFRL1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic CMFRL1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> CMFRL1::ap_ST_fsm_state1 = "1";
const sc_lv<10> CMFRL1::ap_ST_fsm_state2 = "10";
const sc_lv<10> CMFRL1::ap_ST_fsm_state3 = "100";
const sc_lv<10> CMFRL1::ap_ST_fsm_state4 = "1000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state5 = "10000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state6 = "100000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> CMFRL1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> CMFRL1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> CMFRL1::ap_const_lv1_0 = "0";
const sc_lv<32> CMFRL1::ap_const_lv32_3 = "11";
const sc_lv<32> CMFRL1::ap_const_lv32_8 = "1000";
const sc_lv<32> CMFRL1::ap_const_lv32_9 = "1001";
const sc_lv<1> CMFRL1::ap_const_lv1_1 = "1";
const sc_lv<32> CMFRL1::ap_const_lv32_3C23D70A = "111100001000111101011100001010";
const sc_lv<32> CMFRL1::ap_const_lv32_4 = "100";
const sc_lv<32> CMFRL1::ap_const_lv32_3F7FBE77 = "111111011111111011111001110111";
const bool CMFRL1::ap_const_boolean_1 = true;

CMFRL1::CMFRL1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    CMFRL1_fadd_32ns_bkb_U1 = new CMFRL1_fadd_32ns_bkb<1,5,32,32,32>("CMFRL1_fadd_32ns_bkb_U1");
    CMFRL1_fadd_32ns_bkb_U1->clk(ap_clk);
    CMFRL1_fadd_32ns_bkb_U1->reset(ap_rst);
    CMFRL1_fadd_32ns_bkb_U1->din0(tmp_1_reg_145);
    CMFRL1_fadd_32ns_bkb_U1->din1(ap_var_for_const0);
    CMFRL1_fadd_32ns_bkb_U1->ce(ap_var_for_const1);
    CMFRL1_fadd_32ns_bkb_U1->dout(grp_fu_77_p2);
    CMFRL1_fmul_32ns_cud_U2 = new CMFRL1_fmul_32ns_cud<1,4,32,32,32>("CMFRL1_fmul_32ns_cud_U2");
    CMFRL1_fmul_32ns_cud_U2->clk(ap_clk);
    CMFRL1_fmul_32ns_cud_U2->reset(ap_rst);
    CMFRL1_fmul_32ns_cud_U2->din0(i_kp1);
    CMFRL1_fmul_32ns_cud_U2->din1(ap_var_for_const2);
    CMFRL1_fmul_32ns_cud_U2->ce(ap_var_for_const1);
    CMFRL1_fmul_32ns_cud_U2->dout(grp_fu_82_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_kp1_loc_phi_fu_60_p4);
    sensitive << ( tmp_reg_135 );
    sensitive << ( tmp_2_reg_150 );
    sensitive << ( i_kp1_loc_reg_57 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_phi_mux_tmp_3_phi_fu_70_p4);
    sensitive << ( sinc_V );
    sensitive << ( tmp_reg_135 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_3_reg_67 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_i_RL);
    sensitive << ( ap_phi_mux_i_kp1_loc_phi_fu_60_p4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_i_RL_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_teste1);
    sensitive << ( i_k );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_teste1_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_teste2_V);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_phi_mux_tmp_3_phi_fu_70_p4 );

    SC_METHOD(thread_teste2_V_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_tmp_fu_91_p2);
    sensitive << ( sinc_V );
    sensitive << ( aux_sinc_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_91_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000000001";
    aux_sinc_V = "0";
    i_kp1 = "00000000000000000000000000000000";
    i_k = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "CMFRL1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sinc_V, "(port)sinc_V");
    sc_trace(mVcdFile, i_RL, "(port)i_RL");
    sc_trace(mVcdFile, i_RL_ap_vld, "(port)i_RL_ap_vld");
    sc_trace(mVcdFile, teste1, "(port)teste1");
    sc_trace(mVcdFile, teste1_ap_vld, "(port)teste1_ap_vld");
    sc_trace(mVcdFile, teste2_V, "(port)teste2_V");
    sc_trace(mVcdFile, teste2_V_ap_vld, "(port)teste2_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, aux_sinc_V, "aux_sinc_V");
    sc_trace(mVcdFile, i_kp1, "i_kp1");
    sc_trace(mVcdFile, i_k, "i_k");
    sc_trace(mVcdFile, tmp_fu_91_p2, "tmp_fu_91_p2");
    sc_trace(mVcdFile, tmp_reg_135, "tmp_reg_135");
    sc_trace(mVcdFile, grp_fu_82_p2, "grp_fu_82_p2");
    sc_trace(mVcdFile, tmp_1_reg_145, "tmp_1_reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_77_p2, "grp_fu_77_p2");
    sc_trace(mVcdFile, tmp_2_reg_150, "tmp_2_reg_150");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_phi_mux_i_kp1_loc_phi_fu_60_p4, "ap_phi_mux_i_kp1_loc_phi_fu_60_p4");
    sc_trace(mVcdFile, i_kp1_loc_reg_57, "i_kp1_loc_reg_57");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_phi_mux_tmp_3_phi_fu_70_p4, "ap_phi_mux_tmp_3_phi_fu_70_p4");
    sc_trace(mVcdFile, tmp_3_reg_67, "tmp_3_reg_67");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("CMFRL1.hdltvin.dat");
    mHdltvoutHandle.open("CMFRL1.hdltvout.dat");
}

CMFRL1::~CMFRL1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete CMFRL1_fadd_32ns_bkb_U1;
    delete CMFRL1_fmul_32ns_cud_U2;
}

void CMFRL1::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void CMFRL1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_3C23D70A;
}

void CMFRL1::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_3F7FBE77;
}

void CMFRL1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_91_p2.read()))) {
        i_kp1_loc_reg_57 = i_kp1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(tmp_reg_135.read(), ap_const_lv1_1))) {
        i_kp1_loc_reg_57 = tmp_2_reg_150.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_91_p2.read()))) {
        tmp_3_reg_67 = aux_sinc_V.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(tmp_reg_135.read(), ap_const_lv1_1))) {
        tmp_3_reg_67 = sinc_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_91_p2.read(), ap_const_lv1_1))) {
        aux_sinc_V = sinc_V.read();
        i_k = i_kp1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_kp1 = grp_fu_77_p2.read();
        tmp_2_reg_150 = grp_fu_77_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_1_reg_145 = grp_fu_82_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_135 = tmp_fu_91_p2.read();
    }
}

void CMFRL1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void CMFRL1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void CMFRL1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void CMFRL1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void CMFRL1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void CMFRL1::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void CMFRL1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void CMFRL1::thread_ap_phi_mux_i_kp1_loc_phi_fu_60_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(tmp_reg_135.read(), ap_const_lv1_1))) {
        ap_phi_mux_i_kp1_loc_phi_fu_60_p4 = tmp_2_reg_150.read();
    } else {
        ap_phi_mux_i_kp1_loc_phi_fu_60_p4 = i_kp1_loc_reg_57.read();
    }
}

void CMFRL1::thread_ap_phi_mux_tmp_3_phi_fu_70_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(tmp_reg_135.read(), ap_const_lv1_1))) {
        ap_phi_mux_tmp_3_phi_fu_70_p4 = sinc_V.read();
    } else {
        ap_phi_mux_tmp_3_phi_fu_70_p4 = tmp_3_reg_67.read();
    }
}

void CMFRL1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void CMFRL1::thread_i_RL() {
    i_RL = ap_phi_mux_i_kp1_loc_phi_fu_60_p4.read();
}

void CMFRL1::thread_i_RL_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_RL_ap_vld = ap_const_logic_1;
    } else {
        i_RL_ap_vld = ap_const_logic_0;
    }
}

void CMFRL1::thread_teste1() {
    teste1 = i_k.read();
}

void CMFRL1::thread_teste1_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        teste1_ap_vld = ap_const_logic_1;
    } else {
        teste1_ap_vld = ap_const_logic_0;
    }
}

void CMFRL1::thread_teste2_V() {
    teste2_V = ap_phi_mux_tmp_3_phi_fu_70_p4.read();
}

void CMFRL1::thread_teste2_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        teste2_V_ap_vld = ap_const_logic_1;
    } else {
        teste2_V_ap_vld = ap_const_logic_0;
    }
}

void CMFRL1::thread_tmp_fu_91_p2() {
    tmp_fu_91_p2 = (aux_sinc_V.read() ^ sinc_V.read());
}

void CMFRL1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_91_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_91_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void CMFRL1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sinc_V\" :  \"" << sinc_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_RL\" :  \"" << i_RL.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_RL_ap_vld\" :  \"" << i_RL_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"teste1\" :  \"" << teste1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"teste1_ap_vld\" :  \"" << teste1_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"teste2_V\" :  \"" << teste2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"teste2_V_ap_vld\" :  \"" << teste2_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

