// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CMFRL1,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.177000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=521,HLS_SYN_LUT=806,HLS_VERSION=2018_3}" *)

module CMFRL1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sinc_V,
        i_RL,
        i_RL_ap_vld,
        teste1,
        teste1_ap_vld,
        teste2_V,
        teste2_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] sinc_V;
output  [31:0] i_RL;
output   i_RL_ap_vld;
output  [31:0] teste1;
output   teste1_ap_vld;
output  [0:0] teste2_V;
output   teste2_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg i_RL_ap_vld;
reg teste1_ap_vld;
reg teste2_V_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] aux_sinc_V;
reg   [31:0] i_kp1;
reg   [31:0] i_k;
wire   [0:0] tmp_fu_91_p2;
reg   [0:0] tmp_reg_135;
wire   [31:0] grp_fu_82_p2;
reg   [31:0] tmp_1_reg_145;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_77_p2;
reg   [31:0] tmp_2_reg_150;
wire    ap_CS_fsm_state9;
reg   [31:0] ap_phi_mux_i_kp1_loc_phi_fu_60_p4;
reg   [31:0] i_kp1_loc_reg_57;
wire    ap_CS_fsm_state10;
reg   [0:0] ap_phi_mux_tmp_3_phi_fu_70_p4;
reg   [0:0] tmp_3_reg_67;
wire    ap_CS_fsm_state5;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 aux_sinc_V = 1'd0;
#0 i_kp1 = 32'd0;
#0 i_k = 32'd0;
end

CMFRL1_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CMFRL1_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_145),
    .din1(32'd1008981770),
    .ce(1'b1),
    .dout(grp_fu_77_p2)
);

CMFRL1_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CMFRL1_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_kp1),
    .din1(32'd1065336439),
    .ce(1'b1),
    .dout(grp_fu_82_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_kp1_loc_reg_57 <= i_kp1;
    end else if (((tmp_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_kp1_loc_reg_57 <= tmp_2_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_3_reg_67 <= aux_sinc_V;
    end else if (((tmp_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_3_reg_67 <= sinc_V;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        aux_sinc_V <= sinc_V;
        i_k <= i_kp1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_kp1 <= grp_fu_77_p2;
        tmp_2_reg_150 <= grp_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_145 <= grp_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_135 <= tmp_fu_91_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_i_kp1_loc_phi_fu_60_p4 = tmp_2_reg_150;
    end else begin
        ap_phi_mux_i_kp1_loc_phi_fu_60_p4 = i_kp1_loc_reg_57;
    end
end

always @ (*) begin
    if (((tmp_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_tmp_3_phi_fu_70_p4 = sinc_V;
    end else begin
        ap_phi_mux_tmp_3_phi_fu_70_p4 = tmp_3_reg_67;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_RL_ap_vld = 1'b1;
    end else begin
        i_RL_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        teste1_ap_vld = 1'b1;
    end else begin
        teste1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        teste2_V_ap_vld = 1'b1;
    end else begin
        teste2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((tmp_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_RL = ap_phi_mux_i_kp1_loc_phi_fu_60_p4;

assign teste1 = i_k;

assign teste2_V = ap_phi_mux_tmp_3_phi_fu_70_p4;

assign tmp_fu_91_p2 = (sinc_V ^ aux_sinc_V);

endmodule //CMFRL1
