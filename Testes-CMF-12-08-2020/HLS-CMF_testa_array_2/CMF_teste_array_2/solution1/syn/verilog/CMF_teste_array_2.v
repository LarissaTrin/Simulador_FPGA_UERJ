// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CMF_teste_array_2,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.433125,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=89,HLS_VERSION=2018_3}" *)

module CMF_teste_array_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pulsoSinc,
        Saida,
        Saida_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] pulsoSinc;
output  [14:0] Saida;
output   Saida_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Saida_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] SimCLK;
reg   [14:0] k;
wire   [2:0] dados1_address0;
reg    dados1_ce0;
wire   [5:0] dados1_q0;
wire   [14:0] storemerge_fu_112_p3;
reg   [14:0] ap_phi_mux_tmp_6_phi_fu_63_p4;
wire   [0:0] tmp_fu_73_p2;
wire   [63:0] tmp_7_fu_127_p1;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_1_fu_90_p4;
wire   [0:0] icmp_fu_100_p2;
wire   [14:0] tmp_3_fu_106_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 SimCLK = 1'd0;
#0 k = 15'd0;
end

CMF_teste_array_2bkb #(
    .DataWidth( 6 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dados1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dados1_address0),
    .ce0(dados1_ce0),
    .q0(dados1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_fu_73_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        SimCLK <= pulsoSinc;
        k <= storemerge_fu_112_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Saida_ap_vld = 1'b1;
    end else begin
        Saida_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_73_p2 == 1'd0)) begin
            ap_phi_mux_tmp_6_phi_fu_63_p4 = k;
        end else if ((tmp_fu_73_p2 == 1'd1)) begin
            ap_phi_mux_tmp_6_phi_fu_63_p4 = storemerge_fu_112_p3;
        end else begin
            ap_phi_mux_tmp_6_phi_fu_63_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_tmp_6_phi_fu_63_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dados1_ce0 = 1'b1;
    end else begin
        dados1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Saida = dados1_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dados1_address0 = tmp_7_fu_127_p1;

assign icmp_fu_100_p2 = (($signed(tmp_1_fu_90_p4) < $signed(13'd1)) ? 1'b1 : 1'b0);

assign storemerge_fu_112_p3 = ((icmp_fu_100_p2[0:0] === 1'b1) ? tmp_3_fu_106_p2 : 15'd0);

assign tmp_1_fu_90_p4 = {{k[14:2]}};

assign tmp_3_fu_106_p2 = (k + 15'd1);

assign tmp_7_fu_127_p1 = ap_phi_mux_tmp_6_phi_fu_63_p4;

assign tmp_fu_73_p2 = (pulsoSinc ^ SimCLK);

endmodule //CMF_teste_array_2
